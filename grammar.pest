
Program = { SOI ~ Stmt* ~ EOI }

SEMICOLON = _{ ";" }

L_CURLY = _{ "{" }
R_CURLY = _{ "}" }

L_PARAN = _{ "(" }
R_PARAN = _{ ")" }

Stmt = {
    Block
  | If
  | While
  | Loop
  | ((Return | Break | Continue | Decl | Call | SetVar) ~ SEMICOLON)
}

Block = {
    L_CURLY ~ Stmt* ~ R_CURLY
}

If = {
    ("if" ~ L_PARAN ~ Expr ~ R_PARAN) ~ Stmt ~ ("else" ~ Stmt)?
}

While = {
    ("while" ~ L_PARAN ~ Expr ~ R_PARAN) ~ Stmt
}

Loop = {
    "loop" ~ Stmt
}

Return = {
    "return " ~ Expr
}

Break = {
	"break"
}

Continue = {
	"continue"
}

Ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

Decl = { "var " ~ (SetVar | Ident) }

WHITESPACE = _{ SEPARATOR | NEWLINE }

COMMENT = _{ BlockComment | LineComment }

LineComment = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

BlockComment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

SetVar = { Ident ~ "=" ~ Expr }

Call = { Ident ~ L_PARAN ~ Expr? ~ ("," ~ Expr)* ~ R_PARAN }

Expr = {
    BinOpExpr
  | UnaryOpExpr
  | PrimaryExpr
}

BinOpExpr = {
    PrimaryExpr ~ BinOp ~ Expr
}

UnaryOpExpr = {
    UnaryOp ~ PrimaryExpr
}

PrimaryExpr = {
    Call
  | Ident
  | Literal
  | L_PARAN ~ Expr ~ R_PARAN
}

BinOp = {
    "+"
  | "-"
  | "*"
  | "/"
  | "<<"
  | ">>"
  | "!="
  | "=="
  | ">="
  | "<="
  | ">"
  | "<"
}

UnaryOp = {
    "+"
  | "-"
}

Literal = @{ "-"? ~ ASCII_DIGIT+ }

